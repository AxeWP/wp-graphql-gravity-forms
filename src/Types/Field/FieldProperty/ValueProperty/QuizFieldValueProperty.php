<?php
/**
 * GraphQL Field - QuizFieldValueProperty
 * Values for an individual Quiz field.
 *
 * @package WPGraphQLGravityForms\Types\Field\FieldProperties\ValueProperty
 * @since   0.9.0
 */

namespace WPGraphQLGravityForms\Types\Field\FieldProperty\ValueProperty;

use GF_Field;
use RGFormsModel;

/**
 * Class - QuizFieldValueProperty
 */
class QuizFieldValueProperty extends AbstractValueProperty {
	/**
	 * Type registered in WPGraphQL that we are adding the field to.
	 *
	 * @var string
	 */
	public static $type = 'QuizField';

	/**
	 * Existing type registered in WPGraphQL that we are adding the field to.
	 *
	 * @var string
	 */
	public static $field_name = 'values';

	/**
	 * Gets the field type description.
	 */
	public function get_type_description() : string {
		return __( 'Quiz field value.', 'wp-graphql-gravity-forms' );
	}

	/**
	 * Gets the GraphQL type for the field.
	 *
	 * @return array
	 */
	public function get_field_type() : array {
		return [ 'list_of' => 'String' ];
	}

	/**
	 * Get the field value.
	 *
	 * @param array    $entry Gravity Forms entry.
	 * @param GF_Field $field Gravity Forms field.
	 */
	public static function get( array $entry, GF_Field $field ) : ?array {
		// Checkbox values are stored by each individual choice.
		$values = ( 'checkbox' === $field->inputType ? array_column( CheckboxFieldValueProperty::get( $entry, $field ), 'value' ) : $entry[ $field->id ] ) ?: null;

		if ( null === $values ) {
			return null;
		}

		// Use the choice name, since the value is autogenerated gibberish.
		$actual_value = self::maybe_format_field_values( $values, $field );

		/**
		 * String values are wrapped in an array to preserve a single output type.
		 *
		 * @todo convert once input unions are supported by GraphQL spec.
		 */
		return is_array( $actual_value ) ? $actual_value : [ $actual_value ];
	}

	/**
	 * If the field is a Poll type radio, select or checkbox then replace the choice value with the choice text.
	 *
	 * @see GFQuiz->maybe_format_field_values()
	 *
	 * @param string|array  $value The field value.
	 * @param GF_Field|null $field The field object being processed or null.
	 *
	 * @return string|array
	 */
	public static function maybe_format_field_values( $value, $field ) {
		if ( is_object( $field ) && 'quiz' === $field->type ) {
			switch ( $field->inputType ) {
				case 'radio':
				case 'select':
					return RGFormsModel::get_choice_text( $field, $value );

				case 'checkbox':
					if ( is_array( $value ) ) {
						foreach ( $value as &$choice ) {
							if ( ! empty( $choice ) ) {
								$choice = RGFormsModel::get_choice_text( $field, $choice );
							}
						}
					} else {
						foreach ( $field->choices as $choice ) {
							$val   = rgar( $choice, 'value' );
							$text  = rgar( $choice, 'text' );
							$value = str_replace( $val, $text, $value );
						}
					}
			}
		}

		return $value;
	}
}
